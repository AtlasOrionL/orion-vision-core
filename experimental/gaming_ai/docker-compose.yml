version: '3.8'

services:
  # Gaming AI Core Service
  gaming-ai-core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gaming-ai-core
    restart: unless-stopped
    ports:
      - "8080:8080"  # Debug Dashboard
      - "8081:8081"  # API Gateway
      - "8082:8082"  # Metrics
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - OLLAMA_HOST=http://ollama:11434
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://gaming_ai:gaming_ai_pass@postgres:5432/gaming_ai
    volumes:
      - gaming_ai_logs:/home/gaming_ai/gaming_ai/logs
      - gaming_ai_data:/home/gaming_ai/gaming_ai/data
      - gaming_ai_config:/home/gaming_ai/gaming_ai/config
    depends_on:
      - redis
      - postgres
      - ollama
    networks:
      - gaming_ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    container_name: gaming-ai-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - gaming_ai_network
    # GPU support disabled for compatibility
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: gaming-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gaming_ai_network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gaming-ai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=gaming_ai
      - POSTGRES_USER=gaming_ai
      - POSTGRES_PASSWORD=gaming_ai_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gaming_ai_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: gaming-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - gaming_ai_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: gaming-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gaming_ai_admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - gaming_ai_network
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gaming-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - gaming_ai_network
    depends_on:
      - gaming-ai-core

# Named volumes for data persistence
volumes:
  gaming_ai_logs:
    driver: local
  gaming_ai_data:
    driver: local
  gaming_ai_config:
    driver: local
  ollama_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

# Custom network
networks:
  gaming_ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
