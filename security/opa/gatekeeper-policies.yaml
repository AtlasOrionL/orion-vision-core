# Orion Vision Core - OPA Gatekeeper Policies
# Sprint 5.1 - Service Mesh & Advanced Security

# Constraint Template - Require Security Context
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionrequiresecuritycontext
spec:
  crd:
    spec:
      names:
        kind: OrionRequireSecurityContext
      validation:
        type: object
        properties:
          runAsNonRoot:
            type: boolean
          runAsUser:
            type: object
            properties:
              min:
                type: integer
              max:
                type: integer
          allowPrivilegeEscalation:
            type: boolean
          readOnlyRootFilesystem:
            type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionrequiresecuritycontext
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation
          msg := "Container must not allow privilege escalation"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          user := container.securityContext.runAsUser
          user < input.parameters.runAsUser.min
          msg := sprintf("Container must run as user ID >= %v", [input.parameters.runAsUser.min])
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          user := container.securityContext.runAsUser
          user > input.parameters.runAsUser.max
          msg := sprintf("Container must run as user ID <= %v", [input.parameters.runAsUser.max])
        }

---
# Constraint - Enforce Security Context for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionRequireSecurityContext
metadata:
  name: orion-security-context
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["orion-system"]
  parameters:
    runAsNonRoot: true
    runAsUser:
      min: 1000
      max: 65535
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true

---
# Constraint Template - Allowed Registries
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionallowedregistries
spec:
  crd:
    spec:
      names:
        kind: OrionAllowedRegistries
      validation:
        type: object
        properties:
          registries:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionallowedregistries
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          image := container.image
          not starts_with_allowed_registry(image)
          msg := sprintf("Image '%v' is not from an allowed registry", [image])
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          image := container.image
          not starts_with_allowed_registry(image)
          msg := sprintf("Init container image '%v' is not from an allowed registry", [image])
        }
        
        starts_with_allowed_registry(image) {
          registry := input.parameters.registries[_]
          startswith(image, registry)
        }

---
# Constraint - Allowed Registries for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionAllowedRegistries
metadata:
  name: orion-allowed-registries
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["orion-system"]
  parameters:
    registries:
      - "orion-registry.company.com/"
      - "gcr.io/distroless/"
      - "docker.io/library/"
      - "quay.io/prometheus/"
      - "grafana/"
      - "redis:"
      - "jaegertracing/"

---
# Constraint Template - Required Labels
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionrequiredlabels
spec:
  crd:
    spec:
      names:
        kind: OrionRequiredLabels
      validation:
        type: object
        properties:
          labels:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionrequiredlabels
        
        violation[{"msg": msg}] {
          required := input.parameters.labels
          provided := input.review.object.metadata.labels
          missing := required[_]
          not provided[missing]
          msg := sprintf("Missing required label: %v", [missing])
        }

---
# Constraint - Required Labels for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionRequiredLabels
metadata:
  name: orion-required-labels
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "ReplicaSet"]
    namespaces: ["orion-system"]
  parameters:
    labels:
      - "app.kubernetes.io/name"
      - "app.kubernetes.io/version"
      - "app.kubernetes.io/component"
      - "app.kubernetes.io/part-of"

---
# Constraint Template - Resource Limits
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionresourcelimits
spec:
  crd:
    spec:
      names:
        kind: OrionResourceLimits
      validation:
        type: object
        properties:
          cpu:
            type: string
          memory:
            type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionresourcelimits
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.resources.limits.cpu
          msg := "Container must have CPU limits"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.resources.limits.memory
          msg := "Container must have memory limits"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.resources.requests.cpu
          msg := "Container must have CPU requests"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.resources.requests.memory
          msg := "Container must have memory requests"
        }

---
# Constraint - Resource Limits for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionResourceLimits
metadata:
  name: orion-resource-limits
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["orion-system"]
  parameters:
    cpu: "2000m"
    memory: "4Gi"

---
# Constraint Template - Network Policies Required
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionrequirenetworkpolicy
spec:
  crd:
    spec:
      names:
        kind: OrionRequireNetworkPolicy
      validation:
        type: object
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionrequirenetworkpolicy
        
        violation[{"msg": msg}] {
          input.review.kind.kind == "Namespace"
          namespace := input.review.object.metadata.name
          not has_network_policy(namespace)
          msg := sprintf("Namespace '%v' must have a NetworkPolicy", [namespace])
        }
        
        has_network_policy(namespace) {
          # This would need to be implemented with external data
          # For now, we'll assume it's checked elsewhere
          true
        }

---
# Constraint Template - Istio Sidecar Required
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: orionrequireistiosidecar
spec:
  crd:
    spec:
      names:
        kind: OrionRequireIstioSidecar
      validation:
        type: object
        properties:
          exemptImages:
            type: array
            items:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package orionrequireistiosidecar
        
        violation[{"msg": msg}] {
          input.review.object.kind == "Pod"
          namespace := input.review.object.metadata.namespace
          namespace == "orion-system"
          not has_istio_sidecar_annotation
          not is_exempt_image
          msg := "Pod must have Istio sidecar injection enabled"
        }
        
        has_istio_sidecar_annotation {
          input.review.object.metadata.annotations["sidecar.istio.io/inject"] == "true"
        }
        
        has_istio_sidecar_annotation {
          input.review.object.metadata.annotations["sidecar.istio.io/inject"] == "false"
          # Allow explicit disable for system pods
          input.review.object.metadata.labels["app.kubernetes.io/component"] == "system"
        }
        
        is_exempt_image {
          container := input.review.object.spec.containers[_]
          exempt := input.parameters.exemptImages[_]
          startswith(container.image, exempt)
        }

---
# Constraint - Require Istio Sidecar for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionRequireIstioSidecar
metadata:
  name: orion-require-istio-sidecar
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["orion-system"]
  parameters:
    exemptImages:
      - "istio/pilot"
      - "istio/proxyv2"

---
# Constraint Template - Deny Privileged Containers
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: oriondenyprivileged
spec:
  crd:
    spec:
      names:
        kind: OrionDenyPrivileged
      validation:
        type: object
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package oriondenyprivileged
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          container.securityContext.privileged
          msg := "Privileged containers are not allowed"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          container.securityContext.privileged
          msg := "Privileged init containers are not allowed"
        }
        
        violation[{"msg": msg}] {
          input.review.object.spec.securityContext.privileged
          msg := "Privileged pod security context is not allowed"
        }

---
# Constraint - Deny Privileged for Orion
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: OrionDenyPrivileged
metadata:
  name: orion-deny-privileged
spec:
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces: ["orion-system"]

---
# Config - Gatekeeper System Configuration
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: gatekeeper-system
spec:
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system", "istio-system"]
      processes: ["*"]
  validation:
    traces:
      - user:
          kind:
            group: "*"
            version: "*"
            kind: "*"
        kind:
          group: "*"
          version: "*"
          kind: "*"
  readiness:
    statsEnabled: true

---
# Assign - Add Security Labels
apiVersion: mutations.gatekeeper.sh/v1alpha1
kind: Assign
metadata:
  name: orion-security-labels
spec:
  applyTo:
  - groups: [""]
    kinds: ["Pod"]
    versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
    - apiGroups: [""]
      kinds: ["Pod"]
    namespaces: ["orion-system"]
  location: "metadata.labels.security.orion-platform.com/policy-version"
  parameters:
    assign:
      value: "v1.0.0"

---
# Assign - Add Security Annotations
apiVersion: mutations.gatekeeper.sh/v1alpha1
kind: Assign
metadata:
  name: orion-security-annotations
spec:
  applyTo:
  - groups: [""]
    kinds: ["Pod"]
    versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
    - apiGroups: [""]
      kinds: ["Pod"]
    namespaces: ["orion-system"]
  location: "metadata.annotations.security.orion-platform.com/scanned"
  parameters:
    assign:
      value: "true"
