#!/usr/bin/env python3
"""
üöÄ Orion Vision Core API Server
Simple FastAPI server for VS Code Extension AI Provider
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import logging
from typing import Optional, List, Any
import json
import time

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create FastAPI app
app = FastAPI(
    title="Orion Vision Core API",
    description="API server for Orion Vision Core VS Code Extension",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request/Response models
class AIRequest(BaseModel):
    prompt: str
    context: Optional[str] = None
    language: Optional[str] = None
    type: str = "completion"

class AIResponse(BaseModel):
    result: str
    confidence: float
    suggestions: Optional[List[str]] = None
    metadata: Optional[dict] = None

# Health check endpoint
@app.get("/api/health")
async def health_check():
    """Health check endpoint for VS Code extension"""
    return {
        "status": "healthy",
        "service": "Orion Vision Core API",
        "version": "1.0.0",
        "timestamp": time.time()
    }

# AI completion endpoint
@app.post("/api/ai/completion", response_model=AIResponse)
async def ai_completion(request: AIRequest):
    """AI completion endpoint for VS Code extension"""
    try:
        logger.info(f"ü§ñ AI Request: {request.type} - {request.prompt[:50]}...")
        
        # Simulate AI processing
        if request.type == "completion":
            result = f"AI Code Completion for: {request.prompt}\n\n// Generated by Orion Vision Core\n// This is a simulated response"
        elif request.type == "search":
            result = f"Smart Search Results for: {request.prompt}\n\n1. Found relevant code patterns\n2. Suggested improvements\n3. Related documentation"
        elif request.type == "explanation":
            result = f"Code Explanation for: {request.prompt}\n\nThis code appears to be implementing functionality related to your query."
        elif request.type == "refactor":
            result = f"Refactoring Suggestions for: {request.prompt}\n\n1. Extract common functionality\n2. Improve naming conventions\n3. Add error handling"
        elif request.type == "debug":
            result = f"Debug Analysis for: {request.prompt}\n\n1. Check variable initialization\n2. Verify function parameters\n3. Add logging statements"
        else:
            result = f"AI Response for: {request.prompt}\n\nOrion Vision Core is processing your request..."
        
        response = AIResponse(
            result=result,
            confidence=0.85,
            suggestions=[
                "Consider adding error handling",
                "Add unit tests for this functionality",
                "Document the API endpoints"
            ],
            metadata={
                "processing_time": 0.5,
                "model": "orion-vision-core-v1",
                "request_type": request.type
            }
        )
        
        logger.info(f"‚úÖ AI Response generated successfully")
        return response
        
    except Exception as e:
        logger.error(f"‚ùå AI completion error: {str(e)}")
        raise HTTPException(status_code=500, detail=f"AI completion failed: {str(e)}")

# System status endpoint
@app.get("/api/status")
async def system_status():
    """System status endpoint"""
    return {
        "system": "Orion Vision Core",
        "status": "operational",
        "modules": {
            "ai_provider": "active",
            "deployment_manager": "active",
            "webview_provider": "active"
        },
        "uptime": time.time(),
        "version": "8.8.0"
    }

# Extension info endpoint
@app.get("/api/extension/info")
async def extension_info():
    """Extension information endpoint"""
    return {
        "extension": "Orion Vision Core VS Code Extension",
        "version": "1.0.0",
        "features": [
            "AI-powered code completion",
            "Smart code search",
            "Deployment management",
            "Real-time monitoring"
        ],
        "endpoints": [
            "/api/health",
            "/api/ai/completion",
            "/api/status",
            "/api/extension/info"
        ]
    }

if __name__ == "__main__":
    print("üöÄ Starting Orion Vision Core API Server...")
    print("üì° Server will be available at: http://localhost:8000")
    print("üîó Health check: http://localhost:8000/api/health")
    print("ü§ñ AI completion: http://localhost:8000/api/ai/completion")
    print("üìä System status: http://localhost:8000/api/status")
    print("‚ÑπÔ∏è  Extension info: http://localhost:8000/api/extension/info")
    print("üõë Press Ctrl+C to stop the server")
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info",
        reload=False
    )
