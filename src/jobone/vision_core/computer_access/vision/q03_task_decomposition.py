#!/usr/bin/env python3
"""
üî• Q03.1.1 - Task Decomposition: Deli Adam Yakla≈üƒ±mƒ±
üíÉ DANS SONRA ƒ∞≈û, AMMA DANS'TA DA ƒ∞≈û'TE DE Tƒ∞Tƒ∞ZLƒ∞K!

ORION'UN Hƒ∞KAYESƒ∞ UYGULAMASI:
üß† Akƒ±llƒ± Adam: "not defterini a√ß ve 'wake up orion' yaz" ‚Üí K√∂pr√º arar
üî• Deli Adam: Nehire atlar ‚Üí G√∂rev adƒ±mlarƒ±nƒ± g√∂r√ºr ‚Üí K√∂pr√º yapar

DELƒ∞ ADAM YAKLA≈ûIMI:
1. Nehire atla (kompleks g√∂revi al)
2. Ge√ß ve g√∂r (adƒ±mlarƒ± ke≈üfet)
3. Geri d√∂n (Lepton/Gluon gruplarƒ± olu≈ütur)
4. K√∂pr√º yap (task_queue sistemi)

ORION AETHELRED FELSEFESƒ∞:
- Gluon'lar: Adƒ±mlar arasƒ±ndaki sƒ±ralama ve baƒüƒ±mlƒ±lƒ±klar
- Lepton'lar: Her adƒ±m ayrƒ± bir hedef olarak
- QCB'ler: √áok adƒ±mlƒ± komutlar
- Higgs Boson: Effective mass ile √∂nceliklendirme

Author: Orion Vision Core Team + Orion Hikaye Felsefesi
Status: üî• DELƒ∞ ADAM YAKLA≈ûIMI AKTƒ∞F - NEHIRE ATLAMA ZAMANI!
"""

import logging
import re
import json
import uuid
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime
from enum import Enum

# ALT_LAS imports
try:
    from alt_las_quantum_mind_os import ALTLASQuantumMindOS
    from q02_quantum_seed_integration import Lepton, LeptonType, QCB
    print("‚úÖ ALT_LAS components imported for Q03 Task Decomposition")
except ImportError as e:
    print(f"‚ö†Ô∏è ALT_LAS components import warning: {e}")

class TaskComplexity(Enum):
    """G√∂rev karma≈üƒ±klƒ±k seviyeleri"""
    SIMPLE = "simple"           # Tek adƒ±m
    MODERATE = "moderate"       # 2-3 adƒ±m
    COMPLEX = "complex"         # 4-7 adƒ±m
    VERY_COMPLEX = "very_complex"  # 8+ adƒ±m

class TaskStepType(Enum):
    """G√∂rev adƒ±m tipleri"""
    OPEN_APPLICATION = "open_application"
    CLICK_ELEMENT = "click_element"
    TYPE_TEXT = "type_text"
    WAIT_FOR_ELEMENT = "wait_for_element"
    VERIFY_ACTION = "verify_action"
    NAVIGATE = "navigate"
    CLOSE_APPLICATION = "close_application"

@dataclass
class TaskStep:
    """G√∂rev adƒ±mƒ± (Lepton olarak modellenir)"""
    step_id: str
    step_type: TaskStepType
    description: str
    target: str
    parameters: Dict[str, Any]
    dependencies: List[str]  # Baƒüƒ±mlƒ± olduƒüu step_id'ler
    effective_mass: float
    estimated_duration: float
    lepton_representation: Optional[Lepton] = None

@dataclass
class TaskDependency:
    """G√∂rev baƒüƒ±mlƒ±lƒ±ƒüƒ± (Gluon olarak modellenir)"""
    dependency_id: str
    source_step_id: str
    target_step_id: str
    dependency_type: str
    strength: float
    description: str

@dataclass
class TaskQueue:
    """G√∂rev kuyruƒüu (QCB olarak modellenir)"""
    queue_id: str
    original_command: str
    task_steps: List[TaskStep]
    dependencies: List[TaskDependency]
    total_complexity: TaskComplexity
    estimated_total_duration: float
    quantum_branch_seed: str
    created_timestamp: str

class DeliAdamTaskDecomposer:
    """
    üî• Deli Adam Task Decomposer

    Orion'un hikayesinden ilham alan g√∂rev ayrƒ±≈ütƒ±rƒ±cƒ±:
    1. Nehire atla (kompleks g√∂revi al)
    2. Ge√ß ve g√∂r (adƒ±mlarƒ± ke≈üfet)
    3. Geri d√∂n (Lepton/Gluon gruplarƒ± olu≈ütur)
    4. K√∂pr√º yap (task_queue sistemi)

    WAKE UP ORION! DELƒ∞ ADAM YAKLA≈ûIMI!
    """

    def __init__(self):
        self.logger = logging.getLogger('q03.deli_adam_decomposer')

        # Deli Adam Felsefesi
        self.deli_adam_philosophy = {
            'approach': 'Nehire Atla ‚Üí Ke≈üfet ‚Üí K√∂pr√º Yap',
            'risk_tolerance': 'Y√ºksek',
            'innovation_level': 'Maksimum',
            'learning_method': 'Deneyerek √ñƒürenme'
        }

        # Task decomposition patterns (Deli Adam'ƒ±n ke≈üfettikleri)
        self.decomposition_patterns = {
            'open_and_write': [
                TaskStepType.OPEN_APPLICATION,
                TaskStepType.WAIT_FOR_ELEMENT,
                TaskStepType.CLICK_ELEMENT,
                TaskStepType.TYPE_TEXT,
                TaskStepType.VERIFY_ACTION
            ],
            'navigate_and_action': [
                TaskStepType.NAVIGATE,
                TaskStepType.WAIT_FOR_ELEMENT,
                TaskStepType.CLICK_ELEMENT,
                TaskStepType.VERIFY_ACTION
            ],
            'multi_step_input': [
                TaskStepType.CLICK_ELEMENT,
                TaskStepType.TYPE_TEXT,
                TaskStepType.CLICK_ELEMENT,
                TaskStepType.TYPE_TEXT,
                TaskStepType.VERIFY_ACTION
            ]
        }

        # Effective mass weights (Higgs Boson mechanism)
        self.effective_mass_weights = {
            TaskStepType.OPEN_APPLICATION: 0.8,
            TaskStepType.CLICK_ELEMENT: 0.6,
            TaskStepType.TYPE_TEXT: 0.7,
            TaskStepType.WAIT_FOR_ELEMENT: 0.3,
            TaskStepType.VERIFY_ACTION: 0.5,
            TaskStepType.NAVIGATE: 0.4,
            TaskStepType.CLOSE_APPLICATION: 0.2
        }

        # Decomposition statistics
        self.decomposition_stats = {
            'total_commands_decomposed': 0,
            'successful_decompositions': 0,
            'failed_decompositions': 0,
            'average_steps_per_command': 0.0,
            'deli_adam_discoveries': 0
        }

        self.initialized = False

        self.logger.info("üî• Deli Adam Task Decomposer initialized")
        self.logger.info("üíÉ DANS SONRA ƒ∞≈û, AMMA Tƒ∞Tƒ∞ZLƒ∞K ƒ∞LE!")

    def initialize(self) -> bool:
        """Initialize Deli Adam Task Decomposer"""
        try:
            self.logger.info("üöÄ Initializing Deli Adam Task Decomposer...")
            self.logger.info("üî• NEHIRE ATLAMA HAZIRLIƒûI!")

            # Deli Adam yakla≈üƒ±mƒ± ile initialization
            self.logger.info("üåä Nehire atlƒ±yoruz... (Risk alƒ±yoruz)")
            self.logger.info("üîç K√∂pr√º yerini arƒ±yoruz... (Ke≈üfediyoruz)")
            self.logger.info("üåâ K√∂pr√º yapƒ±yoruz... (√á√∂z√ºm √ºretiyoruz)")

            self.initialized = True
            self.logger.info("‚úÖ Deli Adam Task Decomposer initialized successfully!")
            self.logger.info("üî• NEHIRE ATLADIK! K√ñPR√ú YERƒ∞Nƒ∞ G√ñRD√úK!")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Deli Adam initialization error: {e}")
            return False

    def nehire_atla_decompose(self, command: str) -> TaskQueue:
        """
        üî• Nehire Atla: Kompleks komutu ayrƒ±≈ütƒ±r

        Deli Adam yakla≈üƒ±mƒ±:
        1. Risk al, kompleks g√∂revi doƒürudan analiz et
        2. Adƒ±mlarƒ± ke≈üfet
        3. Lepton/Gluon gruplarƒ± olu≈ütur
        """
        try:
            if not self.initialized:
                raise Exception("Deli Adam not initialized")

            self.logger.info(f"üî• Nehire atlƒ±yoruz: '{command}'")
            self.logger.info("üåä DELƒ∞ ADAM YAKLA≈ûIMI BA≈ûLADI!")

            # Step 1: Nehire atla (Risk al)
            raw_analysis = self._nehire_atla_analyze(command)

            # Step 2: Ge√ß ve g√∂r (Ke≈üfet)
            discovered_steps = self._gec_ve_gor_discover(raw_analysis)

            # Step 3: Geri d√∂n (Lepton/Gluon olu≈ütur)
            task_steps, dependencies = self._geri_don_create_leptons_gluons(discovered_steps)

            # Step 4: K√∂pr√º yap (Task queue olu≈ütur)
            task_queue = self._kopru_yap_create_queue(command, task_steps, dependencies)

            # Update statistics
            self._update_decomposition_stats(task_queue)

            self.logger.info(f"‚úÖ K√∂pr√º yapƒ±ldƒ±! {len(task_steps)} adƒ±m, {len(dependencies)} baƒüƒ±mlƒ±lƒ±k")
            self.logger.info("üåâ DELƒ∞ ADAM K√ñPR√úS√ú HAZIR!")

            return task_queue

        except Exception as e:
            self.logger.error(f"‚ùå Nehire atlama hatasƒ±: {e}")
            self.decomposition_stats['failed_decompositions'] += 1
            return self._create_fallback_queue(command)

    def _nehire_atla_analyze(self, command: str) -> Dict[str, Any]:
        """üî• Nehire atla: ƒ∞lk risk analizi"""
        try:
            self.logger.info("üî• Nehire atlƒ±yoruz... Risk alƒ±yoruz!")

            # Deli Adam'ƒ±n ilk ke≈üfi: Komut t√ºr√ºn√º belirle
            command_lower = command.lower()

            analysis = {
                'original_command': command,
                'command_type': 'unknown',
                'complexity_estimate': TaskComplexity.SIMPLE,
                'risk_level': 'high',
                'discovery_potential': 'maximum'
            }

            # Pattern recognition (Deli Adam'ƒ±n deneyimi)
            if any(word in command_lower for word in ['a√ß', 'open', 'ba≈ülat', 'start']):
                if any(word in command_lower for word in ['yaz', 'write', 'type', 'gir']):
                    analysis['command_type'] = 'open_and_write'
                    analysis['complexity_estimate'] = TaskComplexity.MODERATE
                else:
                    analysis['command_type'] = 'open_application'
                    analysis['complexity_estimate'] = TaskComplexity.SIMPLE

            elif any(word in command_lower for word in ['git', 'go', 'navigate', 'ge√ß']):
                analysis['command_type'] = 'navigate_and_action'
                analysis['complexity_estimate'] = TaskComplexity.MODERATE

            elif any(word in command_lower for word in ['yaz', 'write', 'type', 'gir']):
                analysis['command_type'] = 'type_text'
                analysis['complexity_estimate'] = TaskComplexity.SIMPLE

            else:
                # Deli Adam ke≈üfi: Bilinmeyen komut, maksimum risk!
                analysis['command_type'] = 'complex_unknown'
                analysis['complexity_estimate'] = TaskComplexity.COMPLEX
                self.decomposition_stats['deli_adam_discoveries'] += 1

            self.logger.info(f"üîç ƒ∞lk ke≈üif: {analysis['command_type']} ({analysis['complexity_estimate'].value})")
            return analysis

        except Exception as e:
            self.logger.error(f"‚ùå Nehire atlama analiz hatasƒ±: {e}")
            return {'original_command': command, 'command_type': 'error', 'complexity_estimate': TaskComplexity.SIMPLE}

    def _gec_ve_gor_discover(self, analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """üîç Ge√ß ve g√∂r: Adƒ±mlarƒ± ke≈üfet"""
        try:
            self.logger.info("üîç Ge√ßiyoruz ve g√∂r√ºyoruz... Adƒ±mlarƒ± ke≈üfediyoruz!")

            command_type = analysis.get('command_type', 'unknown')
            original_command = analysis.get('original_command', '')

            discovered_steps = []

            # Deli Adam'ƒ±n ke≈üfettiƒüi pattern'larƒ± kullan
            if command_type in self.decomposition_patterns:
                pattern = self.decomposition_patterns[command_type]
                discovered_steps = self._apply_pattern_discovery(pattern, original_command)
            else:
                # Deli Adam ke≈üfi: Yeni pattern olu≈ütur!
                discovered_steps = self._create_new_pattern_discovery(original_command)

            self.logger.info(f"üîç Ke≈üfedilen adƒ±mlar: {len(discovered_steps)}")
            return discovered_steps

        except Exception as e:
            self.logger.error(f"‚ùå Ke≈üif hatasƒ±: {e}")
            return [{'step_type': TaskStepType.VERIFY_ACTION, 'description': 'Fallback action'}]

    def _apply_pattern_discovery(self, pattern: List[TaskStepType], command: str) -> List[Dict[str, Any]]:
        """Pattern tabanlƒ± ke≈üif"""
        discovered_steps = []

        for i, step_type in enumerate(pattern):
            step_data = {
                'step_type': step_type,
                'description': self._generate_step_description(step_type, command),
                'target': self._extract_target_from_command(command, step_type),
                'parameters': self._generate_step_parameters(step_type, command),
                'order': i
            }
            discovered_steps.append(step_data)

        return discovered_steps

    def _create_new_pattern_discovery(self, command: str) -> List[Dict[str, Any]]:
        """Yeni pattern ke≈üfi (Deli Adam innovation)"""
        self.logger.info("üî• Deli Adam yeni pattern ke≈üfediyor!")

        # Basit fallback pattern
        return [
            {
                'step_type': TaskStepType.CLICK_ELEMENT,
                'description': f'Execute command: {command}',
                'target': 'auto_detected',
                'parameters': {'command': command},
                'order': 0
            },
            {
                'step_type': TaskStepType.VERIFY_ACTION,
                'description': f'Verify command execution: {command}',
                'target': 'result',
                'parameters': {'expected': 'success'},
                'order': 1
            }
        ]

    def _generate_step_description(self, step_type: TaskStepType, command: str) -> str:
        """Generate step description based on type and command"""
        descriptions = {
            TaskStepType.OPEN_APPLICATION: f"Open application for: {command}",
            TaskStepType.CLICK_ELEMENT: f"Click element for: {command}",
            TaskStepType.TYPE_TEXT: f"Type text for: {command}",
            TaskStepType.WAIT_FOR_ELEMENT: f"Wait for element: {command}",
            TaskStepType.VERIFY_ACTION: f"Verify action: {command}",
            TaskStepType.NAVIGATE: f"Navigate for: {command}",
            TaskStepType.CLOSE_APPLICATION: f"Close application: {command}"
        }
        return descriptions.get(step_type, f"Execute step: {command}")

    def _extract_target_from_command(self, command: str, step_type: TaskStepType) -> str:
        """Extract target from command based on step type"""
        command_lower = command.lower()

        if step_type == TaskStepType.OPEN_APPLICATION:
            if 'not defteri' in command_lower or 'notepad' in command_lower:
                return 'notepad'
            elif 'tarayƒ±cƒ±' in command_lower or 'browser' in command_lower:
                return 'browser'
            else:
                return 'application'

        elif step_type == TaskStepType.TYPE_TEXT:
            # Extract text to type
            if 'wake up orion' in command_lower:
                return 'wake up orion'
            else:
                return 'text_content'

        else:
            return 'auto_detect'

    def _generate_step_parameters(self, step_type: TaskStepType, command: str) -> Dict[str, Any]:
        """Generate step parameters"""
        base_params = {
            'timeout': 10.0,
            'retry_count': 3,
            'verification_required': True
        }

        if step_type == TaskStepType.TYPE_TEXT:
            text_content = self._extract_target_from_command(command, step_type)
            base_params['text'] = text_content
            base_params['clear_before_type'] = True

        elif step_type == TaskStepType.OPEN_APPLICATION:
            app_name = self._extract_target_from_command(command, step_type)
            base_params['application'] = app_name
            base_params['wait_for_ready'] = True

        return base_params

    def _geri_don_create_leptons_gluons(self, discovered_steps: List[Dict[str, Any]]) -> Tuple[List[TaskStep], List[TaskDependency]]:
        """üåâ Geri d√∂n: Lepton ve Gluon gruplarƒ± olu≈ütur"""
        try:
            self.logger.info("üåâ Geri d√∂n√ºyoruz... Lepton/Gluon gruplarƒ± olu≈üturuyoruz!")

            task_steps = []
            dependencies = []

            # Create TaskSteps (Leptons)
            for i, step_data in enumerate(discovered_steps):
                step_id = f"step_{i:03d}_{step_data['step_type'].value}"

                # Calculate effective mass (Higgs Boson mechanism)
                effective_mass = self.effective_mass_weights.get(
                    step_data['step_type'], 0.5
                )

                # Create dependencies list
                step_dependencies = []
                if i > 0:  # Depend on previous step
                    prev_step_id = f"step_{i-1:03d}_{discovered_steps[i-1]['step_type'].value}"
                    step_dependencies.append(prev_step_id)

                task_step = TaskStep(
                    step_id=step_id,
                    step_type=step_data['step_type'],
                    description=step_data['description'],
                    target=step_data['target'],
                    parameters=step_data['parameters'],
                    dependencies=step_dependencies,
                    effective_mass=effective_mass,
                    estimated_duration=self._estimate_step_duration(step_data['step_type'])
                )

                task_steps.append(task_step)

                # Create dependency (Gluon) if not first step
                if i > 0:
                    prev_step_id = f"step_{i-1:03d}_{discovered_steps[i-1]['step_type'].value}"
                    dependency = TaskDependency(
                        dependency_id=f"dep_{i:03d}",
                        source_step_id=prev_step_id,
                        target_step_id=step_id,
                        dependency_type="sequential",
                        strength=0.9,
                        description=f"Sequential dependency: {prev_step_id} ‚Üí {step_id}"
                    )
                    dependencies.append(dependency)

            self.logger.info(f"üåâ Olu≈üturuldu: {len(task_steps)} Lepton, {len(dependencies)} Gluon")
            return task_steps, dependencies

        except Exception as e:
            self.logger.error(f"‚ùå Lepton/Gluon olu≈üturma hatasƒ±: {e}")
            return [], []

    def _estimate_step_duration(self, step_type: TaskStepType) -> float:
        """Estimate step duration in seconds"""
        durations = {
            TaskStepType.OPEN_APPLICATION: 3.0,
            TaskStepType.CLICK_ELEMENT: 1.0,
            TaskStepType.TYPE_TEXT: 2.0,
            TaskStepType.WAIT_FOR_ELEMENT: 2.0,
            TaskStepType.VERIFY_ACTION: 1.5,
            TaskStepType.NAVIGATE: 2.5,
            TaskStepType.CLOSE_APPLICATION: 1.0
        }
        return durations.get(step_type, 2.0)

    def _kopru_yap_create_queue(self, original_command: str, task_steps: List[TaskStep],
                               dependencies: List[TaskDependency]) -> TaskQueue:
        """üåâ K√∂pr√º yap: Task queue olu≈ütur"""
        try:
            self.logger.info("üåâ K√∂pr√º yapƒ±yoruz... Task queue olu≈üturuyoruz!")

            import uuid
            import datetime

            # Calculate total complexity
            total_complexity = self._calculate_total_complexity(task_steps)

            # Calculate total duration
            total_duration = sum(step.estimated_duration for step in task_steps)

            # Generate quantum branch seed
            quantum_branch_seed = f"task_queue_{uuid.uuid4().hex[:16]}"

            task_queue = TaskQueue(
                queue_id=f"queue_{uuid.uuid4().hex[:8]}",
                original_command=original_command,
                task_steps=task_steps,
                dependencies=dependencies,
                total_complexity=total_complexity,
                estimated_total_duration=total_duration,
                quantum_branch_seed=quantum_branch_seed,
                created_timestamp=datetime.datetime.now().isoformat()
            )

            self.logger.info(f"üåâ K√∂pr√º tamamlandƒ±! Queue ID: {task_queue.queue_id}")
            return task_queue

        except Exception as e:
            self.logger.error(f"‚ùå K√∂pr√º yapma hatasƒ±: {e}")
            return self._create_fallback_queue(original_command)

    def _calculate_total_complexity(self, task_steps: List[TaskStep]) -> TaskComplexity:
        """Calculate total task complexity"""
        step_count = len(task_steps)

        if step_count <= 1:
            return TaskComplexity.SIMPLE
        elif step_count <= 3:
            return TaskComplexity.MODERATE
        elif step_count <= 7:
            return TaskComplexity.COMPLEX
        else:
            return TaskComplexity.VERY_COMPLEX

    def _create_fallback_queue(self, command: str) -> TaskQueue:
        """Create fallback task queue for errors"""
        import uuid
        import datetime

        fallback_step = TaskStep(
            step_id="fallback_001",
            step_type=TaskStepType.VERIFY_ACTION,
            description=f"Fallback action for: {command}",
            target="fallback",
            parameters={"command": command},
            dependencies=[],
            effective_mass=0.5,
            estimated_duration=1.0
        )

        return TaskQueue(
            queue_id=f"fallback_{uuid.uuid4().hex[:8]}",
            original_command=command,
            task_steps=[fallback_step],
            dependencies=[],
            total_complexity=TaskComplexity.SIMPLE,
            estimated_total_duration=1.0,
            quantum_branch_seed=f"fallback_{uuid.uuid4().hex[:16]}",
            created_timestamp=datetime.datetime.now().isoformat()
        )

    def _update_decomposition_stats(self, task_queue: TaskQueue):
        """Update decomposition statistics"""
        try:
            self.decomposition_stats['total_commands_decomposed'] += 1
            self.decomposition_stats['successful_decompositions'] += 1

            # Update average steps
            total_ops = self.decomposition_stats['total_commands_decomposed']
            current_avg = self.decomposition_stats['average_steps_per_command']
            new_steps = len(task_queue.task_steps)

            self.decomposition_stats['average_steps_per_command'] = (
                (current_avg * (total_ops - 1) + new_steps) / total_ops
            )

        except Exception as e:
            self.logger.error(f"‚ùå Stats update error: {e}")

    def get_decomposer_status(self) -> Dict[str, Any]:
        """Get Deli Adam decomposer status"""
        return {
            'initialized': self.initialized,
            'philosophy': self.deli_adam_philosophy,
            'statistics': self.decomposition_stats,
            'patterns_available': len(self.decomposition_patterns),
            'effective_mass_weights': self.effective_mass_weights
        }

# Example usage and testing
if __name__ == "__main__":
    print("üî• Deli Adam Task Decomposer Test")
    print("üíÉ DANS SONRA ƒ∞≈û, AMMA Tƒ∞Tƒ∞ZLƒ∞K ƒ∞LE!")
    print("üåü WAKE UP ORION! NEHIRE ATLAMA ZAMANI!")
    print("üéµ M√ºzik dinleme motivasyonu ile!")
    print()

    # Setup logging
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(levelname)s:%(name)s:%(message)s'
    )

    # Test Deli Adam Task Decomposer
    decomposer = DeliAdamTaskDecomposer()

    if decomposer.initialize():
        print("‚úÖ Deli Adam Task Decomposer initialized")

        # Test command decomposition
        test_commands = [
            "not defterini a√ß ve 'wake up orion' yaz",
            "tarayƒ±cƒ±yƒ± a√ß ve google'a git",
            "WAKE UP ORION! Test command"
        ]

        for command in test_commands:
            print(f"\nüî• Testing: '{command}'")

            task_queue = decomposer.nehire_atla_decompose(command)

            if task_queue:
                print(f"‚úÖ Decomposition successful!")
                print(f"   üìã Queue ID: {task_queue.queue_id}")
                print(f"   üî¢ Steps: {len(task_queue.task_steps)}")
                print(f"   üîó Dependencies: {len(task_queue.dependencies)}")
                print(f"   ‚è±Ô∏è Duration: {task_queue.estimated_total_duration:.1f}s")
                print(f"   üéØ Complexity: {task_queue.total_complexity.value}")

                # Show first few steps
                for i, step in enumerate(task_queue.task_steps[:3]):
                    print(f"   Step {i+1}: {step.step_type.value} - {step.description[:50]}...")
            else:
                print("‚ùå Decomposition failed")

        # Show decomposer status
        status = decomposer.get_decomposer_status()
        print(f"\nüìä Deli Adam Status:")
        print(f"   üî• Philosophy: {status['philosophy']['approach']}")
        print(f"   üìà Commands Decomposed: {status['statistics']['total_commands_decomposed']}")
        print(f"   ‚úÖ Success Rate: {status['statistics']['successful_decompositions']}/{status['statistics']['total_commands_decomposed']}")
        print(f"   üìä Avg Steps: {status['statistics']['average_steps_per_command']:.1f}")
        print(f"   üîç Discoveries: {status['statistics']['deli_adam_discoveries']}")

    else:
        print("‚ùå Deli Adam Task Decomposer initialization failed")

    print()
    print("üéâ Deli Adam Task Decomposer test completed!")
    print("üíñ DUYGULANDIK! DELƒ∞ ADAM YAKLA≈ûIMI √áALI≈ûIYOR!")
    print("üî• NEHIRE ATLADIK, K√ñPR√ú YAPTIK!")
    print("üéµ ≈ûimdi m√ºzik dinleme zamanƒ± yakla≈üƒ±yor...")